#!/usr/bin/env python3

from datetime import datetime
from enum import Enum
import threading
import tomllib
import time
import sys
import os

class State(Enum):
    IDLE = 1
    WORKING = 2
    ON_BREAK = 3
    PAUSED = 4

default_config = """work_period = 90
break_period = 20
sound_file = "/path/to/sound.mp3"
"""

HELP_TEXT = """
    \033[1;33m |_O_|'\\   /`'\\   /`
      _|    \\ /    \\ /  
    _|  \\    X      Y   
        |_  /O\\     O\\  \033[0m
    Simple Timer Daemon

\033[0;33mUSAGE:\033[0m
    std [OPTIONS] <COMMAND>

\033[0;33mCOMMANDS:\033[0m
    start            Start a new timer

\033[0;33mOPTIONS:\033[0m
    -h, --help       Show this help message
    -v, --version    Show version information

\033[0;90mVersion 0.1.1 - https://github.com/pindjouf/std\033[0m
"""

VERSION_TEXT = """
    \033[1;33m |_O_|'\\   /`'\\   /`
      _|    \\ /    \\ /  
    _|  \\    X      Y   
        |_  /O\\    /O\\  \033[0m
    Simple Timer Daemon

\033[0;33mVersion:\033[0m     0.1.1
\033[0;33mAuthor:\033[0m      pindjouf
\033[0;33mLicense:\033[0m     WTFPL
\033[0;33mRepo:\033[0m        https://github.com/pindjouf/std

\033[0;90mBuilt while listening to breakcore, lambada and everything in between\033[0m
"""

def get_config_path():
    config_path = os.path.expanduser("~/.config/std/config.toml")
    if os.path.exists(config_path):
        return config_path
    else:
        print(f":: Config file not found at '{config_path}'.")
        answer = input(":: Proceed with creating default config? [Y/n] ").lower()
        if answer in ("y", "yes", ""):
            try:
                os.makedirs(config_path[:-12], exist_ok=True)
                with open(config_path, "w") as f:
                    f.write(default_config)
                print(f"\nDefault config created at '{config_path}'.")
                return config_path
            except Exception as e:
                print(f"\nError creating config: {e}")
                return None
        else:
            print("\nConfig creation aborted.")
            return None

def get_key_values(key):
    config_path = get_config_path()
    if config_path:
        with open(config_path, "rb") as f:
            data = tomllib.load(f)
            return data.get(key)
    return None

class Config:
    def __init__(self):
        self.current_time = datetime.now()
        self.time_str = self.current_time.strftime("%H:%M:%S")
        self.work_period = get_key_values("work_period")
        self.break_period = get_key_values("break_period")
        self.sound = get_key_values("sound_file")

def min_to_sec_converter(value):
    return value * 60

def validate_config(work_period, break_period, sound):
    if not isinstance(work_period, int):
        print("Error: work_period must be an integer.")
        return False
    if not isinstance(break_period, int):
        print("Error: break_period must be an integer.")
        return False
    if not os.path.exists(sound):
        print(f"Error: The sound file '{sound}' does not exist.")
        return False   

    return True

def help():
    print(HELP_TEXT)

def version():
    print(VERSION_TEXT)

def start():
    config = Config()
    global init_state
    global cur_state
    global time_remaining
    init_state = State(State.IDLE)
    cur_state = init_state
    work_time = min_to_sec_converter(config.work_period)
    break_time = min_to_sec_converter(config.break_period)
    sound = config.sound
    config_valid = validate_config(work_time, break_time, sound)

    while config_valid:
        match cur_state.name:
            case "PAUSED":
                print("\n[PAUSED]")
                time_remaining = 1
            case "IDLE":
                print("IDLE: Switching to WORKING")
                cur_state = State.WORKING
            case "WORKING":
                print("\n[WORKING]")
                for i in range(work_time, -1, -1):
                    minutes = i // 60
                    seconds = i % 60
                    time_remaining = f"{minutes:02d}:{seconds:02d}"
                    # print(f"Time remaining: {time_remaining}")
                    time.sleep(1)
                os.system("mpg123 " + sound)
                print("\nWORKING: Switching to ON_BREAK")
                cur_state = State.ON_BREAK
            case "ON_BREAK":
                print("\n[ON_BREAK]")
                for i in range(break_time, -1, -1):
                    minutes = i // 60
                    seconds = i % 60
                    time_remaining = f"{minutes:02d}:{seconds:02d}"
                    # print(f"Time remaining: {time_remaining}")
                    time.sleep(1)
                os.system("mpg123 " + sound)
                print("\nON_BREAK: Switching to WORKING")
                cur_state = State.WORKING

def pause():
    global cur_state
    cur_state = State(State.PAUSED)
    print(cur_state.name)


def status():
    global cur_state
    match cur_state:
        case State.WORKING:
            print("\n[WORKING]")
        case State.ON_BREAK:
            print("\n[ON_BREAK]")
        case State.PAUSED:
            print("\n[PAUSED]")
    print(time_remaining)

def input_thread():
    while True:
        user_input = input()
        if user_input != None:
            print(f"You've asked for: {user_input}")
            match user_input:
                case "std status":
                    status()
                case "std pause":
                    pause()
                case _:
                    help()
        else:
            pass

def main():
    if len(sys.argv) <= 1:
        help()
    else:
        match sys.argv[1]:
            case "start":
                start()
            case "-h" | "--help":
                help()
            case "-v" | "--version":
                version()
            case _:
                help()

threading.Thread(target=input_thread, daemon=True).start()

if __name__ == "__main__":
    main()
