#!/usr/bin/env python3

from datetime import datetime
from enum import Enum
import tomllib
import asyncio
import click
import time
import os

class State(Enum):
    IDLE = 1
    WORKING = 2
    ON_BREAK = 3

default_config = """work_period = 90
break_period = 20
sound_file = "/path/to/sound.mp3"
"""

def get_config_path():
    config_path = os.path.expanduser("~/.config/std/config.toml")
    if os.path.exists(config_path):
        return config_path
    else:
        print(f":: Config file not found at '{config_path}'.")
        answer = input(":: Proceed with creating default config? [Y/n] ").lower()
        if answer in ("y", "yes", ""):
            try:
                os.makedirs(config_path[:-12], exist_ok=True)
                with open(config_path, "w") as f:
                    f.write(default_config)
                print(f"\nDefault config created at '{config_path}'.")
                return config_path
            except Exception as e:
                print(f"\nError creating config: {e}")
                return None
        else:
            print("\nConfig creation aborted.")
            return None

def get_key_values(key):
    config_path = get_config_path()
    if config_path:
        with open(config_path, "rb") as f:
            data = tomllib.load(f)
            return data.get(key)
    return None

class Config:
    def __init__(self):
        self.current_time = datetime.now()
        self.time_str = self.current_time.strftime("%H:%M:%S")
        self.work_period = get_key_values("work_period")
        self.break_period = get_key_values("break_period")
        self.sound = get_key_values("sound_file")

@click.group()
def cli():
    pass

@cli.command()
def start():
    config = Config()
    init_state = State(State.IDLE)
    cur_state = init_state
    work_time = min_to_sec_converter(config.work_period)
    break_time = min_to_sec_converter(config.break_period)
    sound = config.sound

    while True:
        match cur_state.name:
            case "IDLE":
                print("IDLE: Switching to WORKING")
                cur_state = State.WORKING
            case "WORKING":
                print("\n[WORKING]")
                for i in range(work_time, -1, -1):
                    minutes = i // 60
                    seconds = i % 60
                    time_remaining = f"{minutes:02d}:{seconds:02d}"
                    print(f"Time remaining: {time_remaining}")
                    time.sleep(1)
                os.system("mpg123 " + sound)
                print("\nWORKING: Switching to ON_BREAK")
                cur_state = State.ON_BREAK
            case "ON_BREAK":
                print("\n[ON_BREAK]")
                for i in range(break_time, -1, -1):
                    minutes = i // 60
                    seconds = i % 60
                    time_remaining = f"{minutes:02d}:{seconds:02d}"
                    print(f"Time remaining: {time_remaining}")
                    time.sleep(1)
                os.system("mpg123 " + sound)
                print("\nON_BREAK: Switching to WORKING")
                cur_state = State.WORKING

@cli.command()
def pause():
    click.echo("bye")

@cli.command()
def status():
    click.echo("bye")

@cli.command()
def stop():
    click.echo("bye")

def min_to_sec_converter(value):
    result = value * 60
    return result

def time_to_int_converter(current_time):
    hours = current_time.hour
    minutes = current_time.minute
    seconds = current_time.second

    int_minutes = hours * 60 + minutes + (seconds / 60)
    return int_minutes

def int_to_time_converter(int_minutes):
    hours = int(int_minutes // 60)
    remaining_minutes = int(int_minutes % 60)
    seconds = int(round((int_minutes - int(int_minutes)) * 60))

    time = f"{hours:02}:{remaining_minutes:02}:{seconds:02}"
    return time

def main():
    cli()

if __name__ == "__main__":
    main()
